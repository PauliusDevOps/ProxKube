- name: Check if Helm is installed
  ansible.builtin.command:
    cmd: "helm version"
  register: helm_check
  ignore_errors: true
- name: Install Helm if not present
  ansible.builtin.shell: |
    curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
  when: helm_check.rc != 0
  become: true
  become_user: "{{ ansible_user }}"
- name: Add Prometheus Helm repository
  ansible.builtin.command:
    cmd: "helm repo add prometheus-community https://prometheus-community.github.io/helm-charts"
  register: add_repo_result
  retries: 3
  delay: 30
  until: add_repo_result.rc == 0
  changed_when: false
  become: true
  become_user: "{{ ansible_user }}"
  when: inventory_hostname == groups['masters'][0]
- name: Update Helm repositories
  ansible.builtin.command:
    cmd: "helm repo update"
  register: update_repo_result
  retries: 3
  delay: 30
  until: update_repo_result.rc == 0
  changed_when: false
  become: true
  become_user: "{{ ansible_user }}"
  when: inventory_hostname == groups['masters'][0]
- name: Create monitoring namespace
  ansible.builtin.command:
    cmd: "kubectl create namespace monitoring"
  register: create_ns_result
  retries: 3
  delay: 10
  until: create_ns_result.rc == 0
  changed_when: create_ns_result.rc == 0
  become: true
  become_user: "{{ ansible_user }}"
  ignore_errors: true
  when: inventory_hostname == groups['masters'][0]

- name: Install Prometheus and Grafana using Helm
  ansible.builtin.command:
    cmd: >
      helm install prometheus-community/kube-prometheus-stack
      --create-namespace --namespace monitoring
      --generate-name
      --set prometheus.service.type=LoadBalancer
      --set prometheus.prometheusSpec.serviceMonitorSelectorNilUsesHelmValues=false
      --set grafana.service.type=LoadBalancer
  register: helm_install_result
  retries: 3
  delay: 30
  until: helm_install_result.rc == 0
  changed_when: helm_install_result.rc == 0
  become: true
  become_user: "{{ ansible_user }}"
  when: inventory_hostname == groups['masters'][0]

- name: Get Prometheus service IP
  ansible.builtin.command:
    cmd: >
      kubectl get svc -n monitoring -l app=kube-prometheus-stack-prometheus -o jsonpath='{.items[0].status.loadBalancer.ingress[0].ip}'
  register: prometheus_service_ip
  retries: 10
  delay: 30
  until: prometheus_service_ip.stdout != ""
  become: true

- name: Set Prometheus URL environment variable
  ansible.builtin.set_fact:
    PROMETHEUS_URL: "http://{{ prometheus_service_ip.stdout }}:9090"

- name: Print Prometheus URL
  ansible.builtin.debug:
    msg: "Prometheus URL: {{ PROMETHEUS_URL }}"

- name: Get Grafana service IP
  ansible.builtin.command:
    cmd: >
      kubectl get svc -n monitoring -l app.kubernetes.io/name=grafana -o jsonpath='{.items[0].status.loadBalancer.ingress[0].ip}'
  register: grafana_service_ip
  retries: 10
  delay: 30
  until: grafana_service_ip.stdout != ""
  become: true

- name: Set Grafana URL environment variable
  ansible.builtin.set_fact:
    GRAFANA_URL: "http://{{ grafana_service_ip.stdout }}"

- name: Print Grafana URL
  ansible.builtin.debug:
    msg: "Grafana URL: {{ GRAFANA_URL }}"