- name: Ensure Python 3 is installed
  ansible.builtin.package:
    name: python3
    state: present

- name: Ensure pip3 is installed
  ansible.builtin.package:
    name: python3-pip
    state: present

- name: Install Kubernetes Python library
  ansible.builtin.pip:
    name: kubernetes
    state: present
  become: true
- name: Update apt package index
  apt:
    update_cache: yes

- name: Install python3-kubernetes
  apt:
    name: python3-kubernetes
    state: present

- name: Debug Info
  debug:
    msg: "python3-kubernetes is installed successfully"

- name: Create /mnt/data directory
  ansible.builtin.file:
    path: /mnt/data
    state: directory
    owner: root
    group: root
    mode: '0755'
  become: true
  become_user: root
  when: inventory_hostname == groups['masters'][0]
    
- name: Create StorageClass for local storage
  ansible.builtin.command:
    cmd: kubectl apply -f https://raw.githubusercontent.com/PauliusDevOps/test/main/sc.yaml
  register: apply_result
  retries: 5
  delay: 60
  until: apply_result.rc == 0
  changed_when: true
  become: true
  become_user: "{{ ansible_user }}"
  when: inventory_hostname == groups['masters'][0]

- name: Create Persistent Volume
  ansible.builtin.command:
    cmd: kubectl apply -f https://raw.githubusercontent.com/PauliusDevOps/test/main/pv.yaml
  register: apply_result
  retries: 5
  delay: 60
  until: apply_result.rc == 0
  changed_when: true
  become: true
  become_user: "{{ ansible_user }}"
  when: inventory_hostname == groups['masters'][0]


#- name: Patch local-storage StorageClass to be default
#  ansible.builtin.shell: |
#    kubectl patch storageclass local-storage -p '{"metadata": {"annotations":{"storageclass.kubernetes.io/is-default-class":"true"}}}'
#  become: true
#  changed_when: false
#  when: inventory_hostname == groups['masters'][0]

- name: Add Portainer Helm repository
  ansible.builtin.command:
    cmd: "helm repo add portainer https://portainer.github.io/k8s/"
  register: add_repo_result
  retries: 3
  delay: 30
  until: add_repo_result.rc == 0
  changed_when: false
  become: true
  become_user: "{{ ansible_user }}"
  when: inventory_hostname == groups['masters'][0]
- name: Update Helm repositories
  ansible.builtin.command:
    cmd: "helm repo update"
  register: update_repo_result
  retries: 3
  delay: 30
  until: update_repo_result.rc == 0
  changed_when: false
  become: true
  become_user: "{{ ansible_user }}"
  when: inventory_hostname == groups['masters'][0]

- name: Install or upgrade Portainer using Helm
  ansible.builtin.command:
    cmd: >
      helm install --create-namespace -n portainer portainer portainer/portainer
      --set service.type=LoadBalancer
  register: helm_install_result
  retries: 3
  delay: 30
  until: helm_install_result.rc == 0
  changed_when: helm_install_result.rc == 0
  become: true
  become_user: "{{ ansible_user }}"
  when: inventory_hostname == groups['masters'][0]

- name: Apply Portainer LoadBalancer manifest
  ansible.builtin.command:
    cmd: kubectl apply -f https://downloads.portainer.io/ce2-19/portainer-lb.yaml
  register: apply_result
  retries: 5
  delay: 60
  until: apply_result.rc == 0
  changed_when: true
  become: true
  become_user: "{{ ansible_user }}"
  when: inventory_hostname == groups['masters'][0]