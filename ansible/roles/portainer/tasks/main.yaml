- name: Add Helm repo for Portainer
  ansible.builtin.command:
    cmd: helm repo add portainer https://portainer.github.io/k8s/
  register: add_repo_result
  retries: 3
  delay: 30
  until: add_repo_result.rc == 0
  changed_when: false
  become: true
  become_user: "{{ ansible_user }}"
  when: inventory_hostname == groups['masters'][0]

- name: Update Helm repos
  ansible.builtin.command:
    cmd: helm repo update
  register: update_repo_result
  retries: 3
  delay: 30
  until: update_repo_result.rc == 0
  changed_when: false
  become: true
  become_user: "{{ ansible_user }}"
  when: inventory_hostname == groups['masters'][0]

- name: Check current storage classes
  command: kubectl get sc
  register: sc_check
  ignore_errors: true

- name: Create ceph-storage storage class if none exists
  command: |
    cat <<EOF | kubectl apply -f -
    apiVersion: storage.k8s.io/v1
    kind: StorageClass
    metadata:
      name: ceph-storage
    provisioner: kubernetes.io/no-provisioner
    volumeBindingMode: WaitForFirstConsumer
    EOF
  when: sc_check.stdout == "" or sc_check.stdout is undefined

- name: Set ceph-storage as default StorageClass if none is set
  command: >
    kubectl patch storageclass ceph-storage
    -p "{\"metadata\": {\"annotations\":{\"storageclass.kubernetes.io/is-default-class\":\"true\"}}}"
  when: "'(default)' not in sc_check.stdout"

- name: Create portainer namespace
  ansible.builtin.command:
    cmd: "kubectl create namespace portainer"
  register: create_ns_result
  retries: 3
  delay: 10
  until: create_ns_result.rc == 0
  changed_when: create_ns_result.rc == 0
  become: true
  become_user: "{{ ansible_user }}"
  ignore_errors: true
  when: inventory_hostname == groups['masters'][0]

- name: Install Portainer if not present (using Helm)
  ansible.builtin.command:
    cmd: "helm install portainer --namespace portainer --set persistence.storageClass=ceph-storage portainer/portainer"
  register: helm_install_result
  retries: 3
  delay: 30
  until: helm_install_result.rc == 0
  changed_when: helm_install_result.rc == 0
  become: true
  become_user: "{{ ansible_user }}"
  when: inventory_hostname == groups['masters'][0]

#- name: Check if portainer namespace exists
#  ansible.builtin.command:
#    cmd: kubectl get namespace portainer
#  register: check_namespace
#  ignore_errors: true
#  changed_when: false
#  become: true
#  become_user: "{{ ansible_user }}"
#  when: inventory_hostname == groups['masters'][0]
#
#- name: Create portainer namespace
#  ansible.builtin.command:
#    cmd: kubectl create namespace portainer
#  when: 
#    - check_namespace.rc != 0
#    - inventory_hostname == groups['masters'][0]
#  become: true
#  become_user: "{{ ansible_user }}"
#  ignore_errors: true
#
#- name: Create Persistent Volume Claim
#  k8s:
#    state: present
#    definition: "{{ lookup('template', '../pvc.yaml') }}"
#    namespace: portainer
#  register: pvc_result
#
#- name: Debug Persistent Volume Claim Creation Result
#  debug:
#    var: pvc_result
#
#
#
#- name: Check if Portainer is already installed
#  ansible.builtin.command:
#    cmd: helm status portainer --namespace portainer
#  register: portainer_check
#  ignore_errors: true
#  changed_when: false
#  become: true
#  become_user: "{{ ansible_user }}"
#  when: inventory_hostname == groups['masters'][0]
#
#- name: Install Portainer if not present (using Helm)
#  ansible.builtin.command:
#    cmd: helm upgrade --install --create-namespace -n portainer portainer portainer/portainer --set tls.force=true #helm install portainer --namespace portainer portainer/portainer
#  register: helm_install_result
#  retries: 3
#  delay: 30
#  until: helm_install_result.rc == 0
#  changed_when: helm_install_result.rc == 0
#  become: true
#  become_user: "{{ ansible_user }}"
#  when: 
#    - inventory_hostname == groups['masters'][0]
#    - portainer_check.rc != 0
#